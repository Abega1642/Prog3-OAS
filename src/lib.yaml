openapi: "3.0.3"
info:
  title: Library management API
  version: "1.0.1"
servers:
  - url: https://localhost
paths:
  /books/{pathPagination}:
    get:
      operationId: getAll
      tags:
        - Books
      summary: get all books available
      parameters:
        - $ref: "#/components/parameters/pathPagination"
        - $ref: "#/components/parameters/queryPagination"
      responses:
        200:
          description: list of all books or of a filtered book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
        400:
          description: Invalid input data.

  /book/add:
    post:
      operationId: addBook
      tags:
        - Books
      summary: add a new book
      requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
      responses:
        200:
          description: book created with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
        400:
          description: Invalid input data.

  /books/update/{bookId}:
    put:
      operationId: delete
      tags:
        - Books
      summary: Update or create a book
      parameters:
        - $ref: "#/components/parameters/bookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
      responses:
        200:
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        201:
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        400:
          description: Invalid input data.

  /book/delete/{bookId}:
    delete:
      operationId: delete
      tags:
        - Books
      summary: delete a book
      parameters:
        - $ref: "#/components/parameters/bookId"
      responses:
        200:
          description: book deleted with success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/book"
        400:
          description: Invalid input data.

  /authors/{pathPagination}:
    get:
      operationId: getAll
      tags:
        - Authors
      summary: get all books authors
      parameters:
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          description: list of all authors or of a filtered author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/author"
        400:
          description: Invalid input data.

  /author/add:
    post:
      operationId: add
      tags:
        - Authors
      summary: add a new author
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/author"
      responses:
        200:
          description: author added with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/author"
        400:
          description: Invalid input data.

  /author/update/{authorId}:
    put:
      operationId: update
      tags:
        - Authors
      summary: update a author
      parameters:
        - $ref: "#/components/parameters/authorId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/author'
      responses:
        '200':
          description: author updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
        '201':
          description: author added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'
        400:
          description: Invalid input data.

  /author/delete/{authorId}:
    delete:
      operationId: delete
      tags:
        - Authors
      summary: delete an author
      parameters:
        - $ref: "#/components/parameters/authorId"
      responses:
        200:
          description: author deleted with success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/author"
        400:
          description: Invalid input data.

components:
  parameters:
    bookName:
      in: query
      name: bookName
      required: false
      schema:
        type: string
        example: The mathematical principle of natural philosophy
        description: Title of the book
    bookId:
      in: path
      name: bookId
      required: true
      schema:
        type: string
        example: bk-sc1-phys-028
    authorId:
      in: path
      name: authorId
      required: true
      schema:
        type: string
        example: auth-sc1-028
    authorName:
      in: query
      name: authorName
      required: false
      schema:
        type: string
        example: Isaac Newton
        description: Name of a book's author
    releaseDate:
        name: releaseDate
        in: query
        description: Start and end of release date interval (two values allowed)
        required: false
        schema:
          type: string
          pattern: ^\d{4}-\d{2}-\d{2};\d{4}-\d{2}-\d{2}$
          example : 1710-11-12;1740-09-30
    queryPagination:
      name: queryPagination
      in: query
      description: page pagination
      required: false
      schema:
        type: string
    pathPagination:
      name: pathPagination
      in: path
      description: page pagination
      required: true
      schema:
        type: string
  schemas:
    author:
      type: object
      properties:
        ID:
          type: string
          example: auth-sc1-028
          nullable: false
        Name:
          type: string
          example: Isaac NEWTON
        Sex:
          type: string
          enum: [M, F]
    book:
      type: object
      properties:
        ID:
          type: string
          example: bk-sc1-phys-028
          nullable: false
        bookName:
          type: string
          example : The mathematical principle of natural philosophy
        author:
          $ref: "#/components/schemas/author"
        pageNumbers:
          type: integer
          format: int32
          example: 512
        topic:
          type: string
          enum: [ROMANCE, COMEDY, OTHER]